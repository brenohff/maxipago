Projeto MaxiPago

Desenvolvido por Breno Franco e disponível em https://github.com/brenohff/maxipago;

/* Script do MySQL */

CREATE SCHEMA maxipago;
USE maxipago;

CREATE TABLE IF NOT EXISTS city (
    id INT AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    latitude DOUBLE,
    longitude DOUBLE,
    PRIMARY KEY (id)
);

INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (1,'Brasília',-15.7797203,-47.9297218);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (2,'Cuiabá',-15.5961103,-56.0966682);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (3,'Campinas',-22.9055595,-47.0608292);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (4,'São Paulo',-23.5475006,-46.6361084);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (5,'Belo Horizonte',-19.9208298,-43.9377785);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (6,'Rio de Janeiro',-22.9064198,-43.1822319);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (7,'Recife',-8.0538902,-34.8811111);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (8,'Goiânia',-16.6786098,-49.253891);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (9,'Maceió',-9.6658297,-35.7352791);
INSERT INTO maxipago.city (`id`,`name`,`latitude`,`longitude`) VALUES (10,'Teresina',-5.08917,-42.8019409);

SELECT * FROM maxipago.city;


/* Modo de Uso do WebService */

- Existem 2 chamadas no serviço:
	* /v1/cidade/buscarTodas
		> Tipo de requisição: GET
		> Não possui nenhum parâmetro obrigatório
		> É retornado no padrão JSON
		> Esta chamada é para buscar todas as cidades cadastradas no banco de dados, facilitando a visualização das mesmas
		> Exemplo: http://localhost:8080/v1/cidade/buscarTodasCidades

	* /v1/cidade/obterCombinacoes
		> Tipo de requisição: GET
		> Possui 2 parâmetros obrigatórios:
			-> tipoRetorno (json ou xml)
			-> unidade (mi ou km)
		> É retornado em json ou xml, a depender do valor passado no parâmetro "unidade"
		> Esta chamada retorna todas as combinações possíveis das cidades
		> Exemplo: http://localhost:8080/v1/cidade/obterCombinacoes?tipoRetorno=json&unidade=km


/* Justificativas */

- Para realizar o cálculo da distância entre as cidades, foi retirado um método do site "https://www.geodatasource.com/developers/java" pois o mesmo já é utilizado em todos os produtos da empresa GEODATASOURCE, logo é confiavel e de fácil implementação, facilitando a conversão de milhas para quilometros.

- O método de combinação foi criado pensando na recursividade, buscando realizar todas as combinações com apenas 1 método, simplificando o entendimento e aumentando a performance. Este método faz todas as combinações do primeiro elemento da lista e, quando terminado, chama ele mesmo passando uma nova lista atualizada sem o elemento que já foi combinado.


/* Observações */

- O banco deve estar rodando localmente (localhost) e na porta padrão do MySQL (3306), caso contrário o projeto não irá se comunicar com o banco de dados.

